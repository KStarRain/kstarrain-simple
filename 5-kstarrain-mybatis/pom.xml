<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>kstarrain-simple</artifactId>
        <groupId>com.kstarrain</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>5-kstarrain-mybatis</artifactId>


    <!-- 参考文档 https://blog.csdn.net/qq_32166627/article/details/70741729-->
    <dependencies>
        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.4.4</version>
        </dependency>

        <!-- mysql驱动包 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.38</version>
        </dependency>

        <!-- pagehelper 分页插件 源码分析：https://blog.csdn.net/u014082617/article/details/71215539/ -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>4.1.4</version>
        </dependency>

        <!-- logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>

        <!-- junit单元测试 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
        <!-- 参考文档 https://www.cnblogs.com/dreamroute/p/6729147.html-->
        <!-- 构建Maven项目的时候，如果没有进行特殊的配置，Maven会按照标准的目录结构查找和处理各种类型文件
             maven 在 comiple 时 它默认的会把src/main/java目录下的所有*java文件编译后放到了target/classes目录中，除了*java的任何文件都会被忽略,包括*xml文件
                                     还会把src/main/resouces目录中的文件复制到target/classes目录中。
             有时候有些配置文件通常与.java文件一起放在src/main/java目录下（如mybatis表映射xml文件）。这些情况下就需要在pom.xml文件中添加<resources>。
            -->
        <resources>

            <!-- resourcec参考文档 https://blog.csdn.net/newbie_907486852/article/details/81205532
                                  https://blog.csdn.net/zht741322694/article/details/78676662-->
            <resource>
                <!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。-->
                <filtering>false</filtering>
                <!-- 指定resources插件处理哪个目录下的资源文件 -->
                <directory>src/main/java</directory>
                <!-- 只 包含directory指定目录下的以下文件-->
                <includes>
                    <include>**/*Mapper.xml</include>
                </includes>
            </resource>
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>
    </build>
</project>