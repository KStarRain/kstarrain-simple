<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--这是mybatis自带的打印日志功能 用logback后可以不用 -->
    <!--<settings>-->
        <!--<setting name="logImpl" value="STDOUT_LOGGING"/>-->
    <!--</settings>-->
    <plugins>
        <!-- PageHelper4.1.1 -->
        <plugin interceptor="com.github.pagehelper.PageHelper">
            <!-- 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库-->
            <property name="dialect" value="mysql"/>
            <property name="offsetAsPageNum" value="false"/>
            <property name="rowBoundsWithCount" value="false"/>
            <property name="pageSizeZero" value="true"/>
            <property name="reasonable" value="true"/>
            <property name="supportMethodsArguments" value="false"/>
            <property name="returnPageInfo" value="none"/>
        </plugin>
    </plugins>



    <!-- 和spring整合后 environments配置将废除 -->
    <environments default="dev">
        <environment id="dev">
            <!-- 事务类型
                 JDBC:  org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory 直接使用JDK提供的JDBC来管理事务的各个环节：提交、回滚、关闭等操作
                 MANAFED: org.apache.ibatis.transaction.managedManagedTransactionFactory 这种机制mybatis自身不会去实现事务管理，而是让程序的容器（JBOSS,WebLogic）来实现对事务的管理，
                 而mybatis自己什么都不做,那么后者有什么意义呢?
                 当我们单独使用MyBatis来构建项目时，我们要在config配置文件中进行环境（environment）配置，在其中要设置事务类型为JDBC，
                 意思是说MyBatis被单独使用时就需要使用JDBC类型的事务模型，因为在这个模型中定义了事务的各个方面，使用它可以完成事务的各项操作。

                 而MANAGED类型的事务模型其实是一个托管模型，也就是说它自身并不实现任何事务功能，而是托管出去由其他框架来实现，
                 例如这个事务的具体实现就交由如Spring之类的框架来实现，而且在使用SSM整合框架后已经不再需要单独配置环境信息（包括事务配置与数据源配置），
                 因为在在整合jar包（mybatis-spring.jar）中拥有覆盖mybatis里面的这部分逻辑的代码，实际情况是即使你显式设置了相关配置信息，系统也会视而不见......

　　              托管的意义显而易见，正是为整合而设。

　　              我们学习MyBatis的目的正是由于其灵活性和与Spring等框架的无缝整合的能力，
                 所以有关JDBC事务模块的内容明显不再是MyBatis功能中的重点，也许只有在单独使用MyBatis的少量系统中才会使用到。
             -->
            <transactionManager type="JDBC"></transactionManager>

            <!-- 数据源类型
                 UNPOOLED    不使用连接池的数据源
                 POOLED      使用连接池的数据源  org.apache.ibatis.datasource.pooled.PooledDataSource
                 JNDI        使用JNDI实现的数据源 -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"></property>

                <!--serverTimezone=GMT%2B8  时区为东八区-->
                <property name="url" value="jdbc:mysql://localhost:3306/db_kstarrain?useSSL=false"></property>
                <property name="username" value="root"></property>
                <property name="password" value="1234qwer"></property>
            </dataSource>
        </environment>
    </environments>

    <!-- 加载 映射文件 -->
    <mappers>

        <!--通过resource方法一次加载一个映射文件 -->
        <!--<mapper resource="com/kstarrain/mapper/StudentMapper.xml"></mapper>-->

        <!-- 批量加载mapper 指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载 -->
        <!-- 遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 -->
        <package name="com.kstarrain.mapper" />
    </mappers>


</configuration>
